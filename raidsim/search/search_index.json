{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FFXIV Raidsim Documentation","text":"<p>Welcome to the official documentation for FFXIV Raidsim, a modular Unity-based project built to simulate raid encounters. Currently this documentation is still in progress, but I will add more to it whenever I have extra free time.</p> <p>This documentation covers:</p> <ul> <li>Getting started with the codebase</li> <li>Architectural principles</li> <li>How to contribute new content</li> <li>Core systems and Components available</li> </ul> <p>Use the sidebar to navigate or begin with Getting Started.</p>"},{"location":"architecture/","title":"Project Architecture","text":"<p>This page explains the core structure of the FFXIV Raidsim project. The architecture is built around modular, self-contained scenes, globally shared managers and data, and a consistent layout that allows for simulation of various FFXIV mechanics in a easy and reusable way.</p>"},{"location":"architecture/#global-architecture","title":"Global Architecture","text":"<p>The project relies on a few foundational components that exist across all scenes:</p>"},{"location":"architecture/#singleton-managers","title":"Singleton Managers","text":"<p>Several systems in the project are managed via singleton objects (MonoBehaviours marked as DontDestroyOnLoad) that are instantiated in a temporary startup scene. These handle general responsibilities such as:</p> <ul> <li>Loading asset bundles linked to scenes</li> <li>Saving any configuration values to disk or memory</li> <li>Checking for program updates</li> <li>Automatically downloading updates from GitHub</li> </ul>"},{"location":"architecture/#globalvariables","title":"GlobalVariables","text":"<p>A static class used to store global values and configuration variables that are accessed across multiple systems. This includes:</p> <ul> <li>Game version info</li> <li>File system paths (e.g., to config folders or asset bundles)</li> <li>Other miscellaneous info</li> </ul>"},{"location":"architecture/#globaldata","title":"GlobalData","text":"<p>A static container of shared data structures used throughout the progarm. These include:</p> <ul> <li><code>Damage</code> struct \u2013 for encapsulating FFXIV-like damage instances</li> <li><code>ActionInfo</code> struct \u2013 for simple way to pass actions with their source/target characters included</li> <li><code>Flag</code> class \u2013 a boolean with multi-source support that can dynamically resolve its final value based on contributors</li> <li>Other important miscellaneous data structures and variables</li> </ul>"},{"location":"architecture/#scene-lifecycle-and-flow","title":"Scene Lifecycle and Flow","text":"<p>The application starts in a lightweight bootstrap scene. This scene initializes the global singleton managers and then immediately loads the Main Menu scene.</p> <p>From the Main Menu, the user can:</p> <ul> <li>Enter the first timeline scene, the demo</li> <li>Then choose and load a fight timeline scene of their choice from a dropdown menu</li> </ul> <p>Each fight timeline scene is entirely self-contained, with its own assets and logic. These scenes simulate specific mechanics and encounters.</p>"},{"location":"architecture/#fight-timeline-scenes","title":"Fight Timeline Scenes","text":"<p>Every timeline scene is structured the same way for consistency and modularity. Some of the key structure elements include:</p>"},{"location":"architecture/#scene-level-singletons","title":"Scene-Level Singletons","text":"<ul> <li>UserInput \u2013 A prefab instance per scene that manages user inputs; values can be overridden per scene.</li> <li>FightTimeline \u2013 A static singleton GameObject that contains the timeline controller. It dictates the main flow of the fight, controls boss behavior, stores randomized event results for later use, and times the execution of major boss actions and mechanics.</li> </ul>"},{"location":"architecture/#timeline-hierarchy","title":"Timeline Hierarchy","text":"<ul> <li>FightTimeline (GameObject)</li> <li>Contains attack sequencing and timing logic for the main boss</li> <li>Has a child GameObject that contains the <code>UserInput</code> script</li> <li>Hosts child GameObjects for organizing:<ul> <li><code>BotTimelines</code>: all player bot timelines</li> <li><code>FightMechanics</code>: all isolated more complex mechanic chains</li> </ul> </li> </ul>"},{"location":"architecture/#characters-and-enemies","title":"Characters and Enemies","text":"<p>Two GameObjects exist at the scene root:</p> <ul> <li><code>Characters</code>: holds all player characters (real one and the bots)</li> <li><code>Enemies</code>: holds the main boss and any other adds or bosses involved in the fight</li> </ul> <p>Each character has:</p> <ul> <li>A <code>Model</code> child: Contains the 3D model for the boss, loaded via <code>ModelHandler</code> from the scene's asset bundle</li> <li>An <code>Actions</code> child: Contains all the weaponskills, spells, and abilities of the character</li> <li>A <code>StatusEffects</code> child: Contains all the runtime-spawned instances of the effect prefabs</li> <li>A <code>VisualEffects</code> child: Contains all VFX objects of the character, most using <code>CharacterEffect</code> components</li> <li>A <code>Nameplate</code> prefab: Contains basic setup for all character nameplates</li> <li>A <code>Pivot</code> child: Empty transform that is used for tethers and other mechanics that need to visually \"attach\" to the player</li> <li>A <code>TargetNode</code> prefab: Contains the component for targeting of the character, has values like hitbox size</li> </ul> <p>Most of these objects (such as actions and status effects) are based on prefabs that get instantiated and perform their behavior and visuals but their actual information and configuration is defined via ScriptableObject based data assets:</p> <ul> <li><code>ActionData</code>: Defines the properties and behavior of weaponskills, spells, and abilities.</li> <li><code>StatusEffectData</code>: Describes buffs, debuffs, and other effects applied to characters.</li> </ul> <p>These ScriptableObjects make it easy to reuse, modify, and extend content without altering the underlying main prefabs.</p>"},{"location":"architecture/#user-interface","title":"User Interface","text":"<p>The UI is stored and handled under a <code>UserInterface</code> GameObject, which has the <code>Canvas</code> component.</p> <p>The <code>Canvas</code> contains the following elements but is not limited to them:</p> <ul> <li>A <code>PartyList</code>child: Stores all UI elements for all of the player characters (bots included)</li> <li>A <code>EnemyList</code>child: Stores all enemies present in the timeline as list, works as the enemies' \"party list\"</li> <li>A <code>Hotbar</code> child: Stores all of the Actions available to the player and displays them</li> <li>A <code>SettingsMenu</code> prefab: Stores all of the global simulator settings, same menu as available in the main menu</li> </ul>"},{"location":"architecture/#environment","title":"Environment","text":"<p>The visual environment for each timeline is stored under an <code>Environment</code> GameObject. This object contains some of the following as it's children:</p> <ul> <li>Arena model (placeholder by default, runtime arena model is loaded via <code>EnvironmentHandler</code>)</li> <li>All lights</li> <li>All global particles</li> <li>Any death wall or out of bounds triggers</li> </ul>"},{"location":"architecture/#collision","title":"Collision","text":"<p>The physical environment for each timeline is stored under a <code>Collision</code> GameObject.</p> <p>This GameObject usually has one or two children that have the static colliders for the arena.</p>"},{"location":"architecture/#mechanics","title":"Mechanics","text":"<p>Most dynamic prefabs are spawned at runtime under the <code>Mechanics</code> GameObject.</p> <p>This GameObject usually contains any of the following children:</p> <ul> <li>AOEs</li> <li>Tethers</li> <li>Towers</li> <li>Other mechanics and effects</li> </ul>"},{"location":"architecture/#ai-nodes","title":"AI Nodes","text":"<p>The <code>AINodes</code> GameObject stores navigation transforms and reference points for the bots, bosses and mechanics:</p> <p>Some of the contained objects include:</p> <ul> <li>Waymarks</li> <li>Bot Nodes</li> <li>Bot Node Groups</li> <li>Mechanic Nodes</li> <li>Other miscellaneous objects</li> </ul> <p>This structure ensures fully modular, easily expandable, and repeatable configuration for all fight timelines and mechanics. Most of the complexity is encapsulated within scene-specific prefabs or GameObjects and runtime data-driven systems, allowing for easier content creation and maintenance.</p>"},{"location":"architecture/#next-steps","title":"Next Steps","text":"<ul> <li>Creating Content</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>This section is still underconstruction.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome! This guide will help you set up the FFXIV Raidsim project on your local machine and download the assets required to run it.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Unity 2022.3 (latest LTS)</li> <li>Git</li> <li>Optional: Code Editor (e.g., Visual Studio or Rider)</li> <li>Optional: Blender (for asset editing)</li> <li>Optional: <code>gdrive</code> (for internal contributors using Google Drive storage)</li> </ul>"},{"location":"getting-started/#cloning-the-repository","title":"Cloning the Repository","text":"<p>To get started, first clone the repository from GitHub:</p> <pre><code>git clone https://github.com/susy-bakaa/ffxiv-raid-sim.git\n</code></pre> <p>This will give you access to all source files, scripts, and text-based assets.</p>"},{"location":"getting-started/#downloading-required-assets","title":"Downloading Required Assets","text":"<p>The project uses a compressed asset archive to store large files like 3D models and textures. These are not included in the Git repo.</p> <p>If you're an external contributor, you need to manually download the archive from here:</p> <p>Download ffxiv-raid-sim.tar.gz</p> <p>Once downloaded, extract the archive into the following folder path (Basically just match the raidsim folder inside the archive to the repository):</p> <pre><code>ffxiv-raid-sim\\raidsim\n</code></pre> <p>After extraction, you\u2019re ready to open the project in Unity via:</p> <pre><code>ffxiv-raid-sim\\raidsim\n</code></pre>"},{"location":"getting-started/#internal-contributors-using-gdrive_utilbat","title":"Internal Contributors: Using <code>gdrive_util.bat</code>","text":"<p>If you are contributing internally and want to sync your own changes to the Google Drive archive and are running on Windows:</p> <ol> <li>Install <code>gdrive</code> and set it up according to this guide.</li> <li>Edit the <code>gdrive_default.txt</code> inside the <code>.gdrive</code> folder with your system-specific values, then save it as <code>gdrive_config.txt</code>.</li> <li>Run <code>gdrive_util.bat</code> from the root of the repository and follow the command prompt instructions.</li> </ol> <p>This is an explanation of what each line inside the config file has to include:</p> <ol> <li>Disk your repository is on</li> <li>Path to your local repository (In a format the windows cd command can read)</li> <li>Name of the archive used with Google Drive</li> <li>File ID of your existing archive on Google Drive (Must be shared to everyone with link)</li> <li>Folder ID of the folder where your archive will sit in (Must be shared to everyone with link)</li> <li>File used for ignored folders and file types (By default <code>.gdriveignore</code>)</li> </ol> <p>This tool just allows you to automatically do the following:</p> <ul> <li>Create archived backups of all binary and large files.</li> <li>Upload backups to Google Drive.</li> <li>Maintain consistency in archive structure.</li> <li>Avoid committing large binaries directly to GitHub.</li> </ul> <p>Note: If you don\u2019t have write access to the original Drive archive, just use the manual download method described above. You can also create your own archive backup in Google Drive with gdrive if you want to. If you do any changes to assets that would need to be ported to the main branch of the official simulator let me know through discord (@no00ob).</p>"},{"location":"getting-started/#building-the-project","title":"Building the Project","text":"<p>After opening the project in Unity:</p> <ul> <li>Let Unity import and compile everything (this may take a few minutes).</li> <li>Use any of the provided demo scenes to test features or begin development.</li> </ul>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Architecture</li> <li>Creating Content</li> </ul>"},{"location":"api/class-CharacterState/","title":"CharacterState Class","text":"<p>This section is still underconstruction.</p>"},{"location":"api/class-FightTimeline/","title":"FightTimeline Class","text":"<p>This section is still underconstruction.</p>"},{"location":"creating-content/adding-scriptable-objects/","title":"Adding Scriptable Objects","text":"<p>This section is still underconstruction.</p>"},{"location":"creating-content/duplicating-prefabs/","title":"Duplicating Prefabs\u0013","text":"<p>This section is still underconstruction.</p>"},{"location":"creating-content/using-components/","title":"Using Components","text":"<p>This section is still underconstruction.</p>"},{"location":"systems/core-system-overview/","title":"Core System Overview","text":"<p>This section is still underconstruction.</p>"},{"location":"systems/input-system/","title":"Input System","text":"<p>This section is still underconstruction.</p>"},{"location":"systems/scene-loader/","title":"Scene Loader","text":"<p>This section is still underconstruction.</p>"}]}